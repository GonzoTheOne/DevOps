name: MuleSoft Deployment

on:
  workflow_call: # This specifies that this workflow can be called by other workflows.
    inputs: # These are parameters that the calling workflow must provide
      mule_app_name:
        required: true
        type: string
      anypoint_environment:
        required: true
        type: string
    secrets: #These are secrets that the calling workflow needs to provide
      VAULT_TOKEN:
        required: true
      ANYPOINT_CLIENT_ID:
        required: false # We'll try to fetch from Vault
      ANYPOINT_CLIENT_SECRET:
        required: false # We'll try to fetch from Vault
      ANYPOINT_USERNAME:
        required: false # We'll try to fetch from Vault
      ANYPOINT_PASSWORD:
        required: false # We'll try to fetch from Vault

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java and Maven
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17' # Or your preferred version

      - name: Build Mule Application
        run: mvn clean package -DskipTests

      - name: Authenticate with HashiCorp Vault
        # Add steps here to authenticate with Vault using the VAULT_TOKEN secret
        run: |
          echo "Authenticating with Vault..."
          # You'll need the Vault address
          VAULT_ADDR="YOUR_VAULT_ADDRESS"
          VAULT_TOKEN="${{ secrets.VAULT_TOKEN }}"

          # Example: Get a client token (if needed, depending on your Vault setup)
          # This step might not be necessary if the provided token is sufficient
          # RESPONSE=$(curl -s --request POST \
          #   --header "X-Vault-Token: $VAULT_TOKEN" \
          #   --data '{"jwt": "YOUR_JWT", "role": "YOUR_ROLE"}' \
          #   "$VAULT_ADDR/v1/auth/jwt/login")
          # AUTH_CLIENT_TOKEN=$(echo "$RESPONSE" | jq -r '.auth.client_token')
          # echo "Vault Client Token: $AUTH_CLIENT_TOKEN"

      - name: Check and Renew Vault Token (if needed)
        if: steps.vault_auth.outputs.VAULT_TOKEN != '' # Only run if we have a token
        id: vault_renewal
        run: |
          VAULT_ADDR="${{ steps.vault_auth.outputs.VAULT_ADDR }}"
          CURRENT_TOKEN="${{ steps.vault_auth.outputs.VAULT_TOKEN }}"
          echo "Checking Vault token TTL..."
          TOKEN_INFO=$(curl -s \
            --header "X-Vault-Token: $CURRENT_TOKEN" \
            "$VAULT_ADDR/v1/auth/token/lookup-self")
          TTL=$(echo "$TOKEN_INFO" | jq -r '.data.ttl')
          echo "Current token TTL: $TTL seconds"

          # Define a threshold for renewal (e.g., if TTL is less than 60 seconds)
          RENEWAL_THRESHOLD=60
          if (( $(echo "$TTL < $RENEWAL_THRESHOLD" | bc -l) )); then
            echo "Renewing Vault token..."
            RENEWAL_RESPONSE=$(curl -s --request POST \
              --header "X-Vault-Token: $CURRENT_TOKEN" \
              "$VAULT_ADDR/v1/auth/token/renew-self")
            NEW_TOKEN=$(echo "$RENEWAL_RESPONSE" | jq -r '.auth.client_token')
            if [[ -n "$NEW_TOKEN" ]]; then
              echo "Vault token renewed successfully."
              echo "NEW_VAULT_TOKEN=$NEW_TOKEN" >> "$GITHUB_OUTPUT"
            else
              echo "Failed to renew Vault token."
              # Optionally fail the workflow here if token renewal fails
              # exit 1
            fi
          else
            echo "Vault token TTL is sufficient. No renewal needed."
            echo "NEW_VAULT_TOKEN=$CURRENT_TOKEN" >> "$GITHUB_OUTPUT"
          fi
          
      - name: Retrieve Anypoint Credentials from Vault
        # Add steps here to retrieve the necessary Anypoint credentials
        run: |
          echo "Retrieving Anypoint credentials from Vault..."
          VAULT_ADDR="YOUR_VAULT_ADDRESS"
          VAULT_TOKEN="${{ secrets.VAULT_TOKEN }}"
          MULE_APP_NAME="${{ inputs.mule_app_name }}"
          ANYPOINT_ENVIRONMENT="${{ inputs.anypoint_environment }}"
          SECRET_PATH="secret/data/anypoint/${MULE_APP_NAME}/${ANYPOINT_ENVIRONMENT}" # Adjust this path as needed

          RESPONSE=$(curl -s \
            --header "X-Vault-Token: $VAULT_TOKEN" \
            "$VAULT_ADDR/v1/$SECRET_PATH")

          # Parse the JSON response to extract the credentials
          ANYPOINT_CLIENT_ID=$(echo "$RESPONSE" | jq -r '.data.data.client_id')
          ANYPOINT_CLIENT_SECRET=$(echo "$RESPONSE" | jq -r '.data.data.client_secret')
          ANYPOINT_USERNAME=$(echo "$RESPONSE" | jq -r '.data.data.username')
          ANYPOINT_PASSWORD=$(echo "$RESPONSE" | jq -r '.data.data.password')

          # Now you can use these environment variables in subsequent steps
          echo "ANYPOINT_CLIENT_ID=$ANYPOINT_CLIENT_ID" >> "$GITHUB_ENV"
          echo "ANYPOINT_CLIENT_SECRET=$ANYPOINT_CLIENT_SECRET" >> "$GITHUB_ENV"
          echo "ANYPOINT_USERNAME=$ANYPOINT_USERNAME" >> "$GITHUB_ENV"
          echo "ANYPOINT_PASSWORD=$ANYPOINT_PASSWORD" >> "$GITHUB_ENV"

      - name: Authenticate with Anypoint Platform
        # Steps to authenticate with Anypoint using the retrieved credentials
        run: |
          echo "Authenticating with Anypoint Platform using Vault-retrieved credentials..."
          # You can now use the environment variables:
          # $ANYPOINT_CLIENT_ID, $ANYPOINT_CLIENT_SECRET, $ANYPOINT_USERNAME, $ANYPOINT_PASSWORD
          echo "Client ID: $ANYPOINT_CLIENT_ID"
          # Add your Anypoint authentication logic here, potentially using the CLI or other tools

      - name: Deploy to Anypoint Marketplace Cloud
        run: |
          echo "Deploying to Anypoint environment: ${{ inputs.anypoint_environment }}"
          # Use the Anypoint CLI or Maven plugin for deployment,
          # potentially using the environment variables set above
